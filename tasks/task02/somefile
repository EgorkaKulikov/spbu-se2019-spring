Pull request #213

Класс BrainInterpreter интерпретирует Brainfuck.
    Свойства:
        - [source] - сохранённый код.
        - [input] - сохранённые входные данные.
        - [jumpTable] хранит соответствия между скобками.
        - [memSize] - количество памяти, выделяемой для исполнения кода.

    - [runCode(s, i)] сохраняет код и входные данные, обновляет [jumpTable] вызовом [setupJumps] и вызывает [runCode()] для выполнения сохранённого кода.

    * В [runCode()] переменная memory, хранящая память для исполнения кода, должна быть val.
    * [memSize] может быть константой.
    * Если подоразумевалось переиспользование кода из source (нет, если судить по одному из коментариев),
      то [runCode()] должен принимать на вход новые данные. Если нет - [BrainInterpreter] может быть переделан в объект
      (в этом случае можно убрать все свойства, оставив константу memSize, а код из [runCode()] целиком перенести в [runCode(s, i))].

Класс BrainGenerator генерирует байткод для JVM из кода на Brainfuck
    Свойства:
        - [className] - имя генерируемого класса
        - [program] - код на Brainfuck
        - [b] - массив для хранения байткода c немного неудачным назаванием

        * [labelOpenStack] и [labelCloseStack] используются только в локальных функциях метода [genInstructions] и могут быть перенесены в него.

    - [generate] создает класс из кода на Brainfuck. Объявляет класс с именем [className] и два метода в нем: [main] и [run].
      Также вызывает соответствующие функции, в которых объявленные методы заролняются.
      В конце все созданное переводится в массив байтов и сохраняется в b.
          - [run] заполняется в [genInstructions], который записывает в [run] переведенные с Brainfuck команды
            (под каждую команду на Brainfuck выделена локальная функция, которая создаёт байткод для этой команды).
            [run] принимает на вход [Reader], который используется для получения данных при выполнении команды ',',
            и [Writer], который используется для записи при выполнении команды '.'.
            [run] выполняет переведенный с Brainfuck код и не возвращает ничего (результат записывается в пришедший [Writer]).
          - [main] заполняется в [genWrapper]. В [main] создаются [InputStreamReader] от стандартного потока ввода
            и [OutputStreamWriter] от стандартного потока ввода, затем вызывается [run] с созданными потоками в качестве параметров.

            * [main] использует стандартые потоки при запуске [run], однако в местах использования созданного класса (в BrainRunner) нужны строки, из-за [main] этого там не используется.
              Вероятно [main] - лишний метод.

    - [save] записывает [b] в файл

    * Между вызовами [generate] и [save] ничего не происходит, их одновременная 'публичность' бессмысленна.
    * BrainGenerator может быть переделан в объект, с public методом generate(name, code).
    * И в BrainGenerator, и в BrainInterpreter при обработке скобок используется [Stack], который будет бросать исключения при вызове [pop] при неправильной последовательности скобок.
      Стоило бы их отлавливать и бросать что-нибудь более информативное.
      Также стоило бы проверять приходящий код на выход за границы выделенной памяти.

Класс BrainRunner выполняет код на Brainfuck, используя сгенерированный байткод для JVM.
    - [runCode] принимает [source] (код на Brainfuck) и [input] (входные данные).
      Создаёт [BrainGenerator], генерирует байткод, сохраняет его в файл и подгружает.
      Из загруженного класса достаётся [run], создаются [StringReader] от [input] и [StringWriter], которые идут на вход при запуске [run].
      Полученная после выполнения строка из [StringWriter] отправляется на выход.

    * Может быть объектом.

Класс PetoohRunner - выполняет код на Petooh
    Свойства:
        - [dictionary] хранит соответствия между командами на Petooh и Brainfuck

    - [toBrainfuck] переводит код на Petooh в код на Brainfuck.
    - [runCode] использует [toBrainfuck], переводя source c Petooh на Brainfuck и создает [BrainRunner], который исполняет полученный код.
    
    * Т.к. dictionary не зависит ни от чего, PetoohRunner может быть объектом.

Абстрактный класс TestRunner
    - [getRunner] возвращает [CodeRunner] для последующего тестирования.
    - [testCode] вызывает исполнение кода в [CodeRunner], полученного из [getRunner], проверяет соответствие между полученным результатом и ожидаемым.

    * Т.к. ни в одном из наследных классов [getRunner] не создает новых объектов,
      при желании можно заменить [getRunner] на [abstract val runner] и переопределять
      его в наследниках. Это будет смотреться чуть красивее.

TestPetooh - тесты для PetoohRunner.
TestBrainfuckRunner - тесты для исполнителей Brainfuck.
TestBrainfuckGenerator - использует тесты из TestBrainfuckRunner для BrainRunner.
TestBrainfuckInterpreter - использует тесты из TestBrainfuckRunner для BrainInterpreter.

Коментарии:

-----
https://github.com/practice271/assignments/pull/213#discussion_r45652710
https://github.com/practice271/assignments/pull/213#discussion_r46422039

Коментарии об отсутствующих модификаторах доступа. Не хватает коментария о том, что
в коде встречаются public функции как с модификатором, так и без.
-----
https://github.com/practice271/assignments/pull/213#discussion_r45652725
https://github.com/practice271/assignments/pull/213#discussion_r45653063

Коментарии о лишних ветках else вполне уместны. Было исправлено только в указанных местах.
-----
https://github.com/practice271/assignments/pull/213#discussion_r45652767

Здесь возникает вопрос: "Правда ли, что runCode() из BrainInterpreter не должен
вызываться снаружи и, если нет, для чего он существует?"
-----
https://github.com/practice271/assignments/pull/213#discussion_r45653057

Этот коментарий можно было бы дополнить вопросом о проверке скобок.
-----
https://github.com/practice271/assignments/pull/213#discussion_r46422275

Коментарий о магических константах. Было исправлено только в указанном месте.
-----
