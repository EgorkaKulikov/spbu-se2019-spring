1)      interpreter:
сам класс, очевидно, реализует интрепретацию кода Brainfuck;
[private fun checkSyntax] - проверяет, что синтаксис скобок в порядке, i.e. нет нарушений в конструкциях while/end, ломаюших все;
[private fun interpretWork] - принимает последовательность символов и расшифровывает их, т.е. выполняет заданные команды для каждого символа, а затем возвращает строку [result], которую программа должна напечатать;
[public fun interpret] - возвращает либо null, если [checkSyntax] == false (нарушение в синтаксисе while / end), либо запускает [fun interpretWork] и возвращает строку [result].
	BrainfuckToJVM:
сам класс, очевидно, реализует компиляцию код Brainfuck под JVM;
[private fun tokenizer] - получает строку [input] - команд на brainFuck и преобразовывает каждую команду в токены вида [Opcode.Type] (SHIFTR, SHIFTL, ADD, SUB, IN, OUT, WHILE, END), а затем возвращает строку команд этих токенов;
[public fun compile] - создает ClassWritetr и его visitMethod. Принимаемая строка команд на BrainFuck токенизируется, затем каждая команда вида [Opcode.Type]	вызывает соотвествтующий [mv].visit{Method} и возвращается байтовый массив [cw]
[private fun MethodVisitor.visitChangeValueInsn] - реализация команд "+" и "-" через интерефейс  ClassVisitor;
[private fun MethodVisitor.visitWriteInsn] - реализация команды "," через интерефейс  ClassVisitor;
[private fun MethodVisitor.visitReadInsn] - реализация команды "." через интерефейс  ClassVisitor;
[private fun MethodVisitor.visitWhileInsn] - реализация команды "[" через интерефейс  ClassVisitor с проверкой на firstLoop;
[private fun MethodVisitor.visitEndInsn] - реализация команды "]" через интерефейс  ClassVisitor;

2) Замечания других ревьюеров точные, касаются стиля кода или общих недочетов в коде. Комментарии об ошибках автор исправил, но некоторые советы не реализовал. Я согласен со всем, что написали ревьюеры:) 
Что по замечаниям к итоговому коммиту пуллреквест: по-прежнему class interpreter с маленькой буквы, что противоречи стилю Kotlin, наименования переменных и функций хорошие, но в коде иногда не хватает комментариев (хотя это субъективный пункт, потому что линейный код, хоть и сложный, не обязательно комментировать, а неоднозначных мест по типу var flag всего одно, и то закомментировано). В [private fun checkSyntax] вместо трех конструкций if-else можно было сделать when(flag). В остальном нет замечаний.

3) Что можно улучшить с помощью новых возможностей Kotlin - не найдено.