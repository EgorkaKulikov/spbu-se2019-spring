#224 

https://github.com/practice271/assignments/pull/224

1)

Класс Convertor_to_brainfuck - конструктор принимает строку(в примере слово "bee")

  symbol -    заполняет массив memory числовыми значениями символов строки
  
  toBF   -    конвертирует символ в его вывод на brainfuck. Принимает count(модуль числа, 
  которое нужно прибавить или отнять, чтобы получить код текущего символа) и его знак(+ или -)
  
  print  -    вызывает toBF для каждого симфола строки, передавая модуль разности кода текущего
  и предыдущего символа(из составленного ранее массива memory) и знак. В результате получаем 
  программу на BF, выводящую заданную строку.
  
  run    -    единственная public функция в классе, реализует логику конвертации путем вызова
  private функций symbol, print

Класс Interpreter_brainfuck - интерпретатор языка brainfuck.
Конструктор принимает программу на BF и in_str(входную  строку)

  read  -    заполняет массив memory числовыми значениями символов входной строки
  
  run   -    последовательно вызывает функции, соответствующие командам языка(inc, dec, 
  openLoop и т.д.), возвращает выходную строку out - единственный возможный результат работы 
  программы. При некорректном вводе out содержит предупреждение "Input error"
  
  inc   -    код символа в memory увеличивается до следующего, в случае превышения максимального
  значения символа - до нулевого.
  
  dec   -    аналогично(предыдущий символ)
  
  openLoop - если значение текущей ячейки 0, переход к соответствующей закрывающей скобке с
  учетом вложенности
  
  openLoop - если значение текущей ячейки не 0, переход к соответствующей открывающей скобке с 
  учетом вложенности
  
  print  -   выводит в out значение текущей ячейки
  
Класс Compiler_brainfuck - компилятор языка brainfuck, использует библиотеку ASM

  getClassWriter - принимает на вход программу, с помощью объекта класса MethodVisitor определяет
  инструкции языка, возвращает сгенерированное представление класса в объекте ClassWriter
  Например, для инструкции "." (вывод текущей ячейки):
  mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", ..)
   - получает поле out класса java/lang/System
  mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "print" ..)
   - задействует метод print класса java/io/PrintStream
  
  generateClassByteArray - возвращает байт-код сгенерироованного в getClassWriter класса
  
  loadClassAndRun - загружает класс из массива байт, ищет и вызывает метод main(в случае отсутствия 
  методов генерирует исключение)
  
  compile - реализует публичную логику компиляции,  вызывая generateClassByteArray, и запуска 
  скомпилированной программы с помощью loadClassAndRun. Возвращает строку out - результат работы
  программы.

hw09Test - класс с тестами к интерпретатору, компилятору и конвертеру(два теста на некорректный ввод,
остальные на корректный)

2)

В ревью вполне справедливое замечание о том, что лучше не дублировать поля.

- Один из серьезных недочетов, не упомянутых ревьюером - неоднократное использование в коде 
  компилятора и интерпретатора констант 30000, 256, 255. 

- В циклах можно было использовать until, который введен уже с версии 1.0.
  
- Некоторые переменные(например, residue в конвертере) объявляются с 
  помощью var, хотя и не изменяются далее в коде.

Соответствие стайлгайду
  
- Не рекомендуется использовать подчеркивания в середине названий
  проперти и классов(следовало использовать camel casing). 
  
- Встречаются аргументы функций, не разделенные пробелами.

- Последний лямбда аргумент рекомендуется указывать без скобок.

3)

С версии 1.3 можно не указывать параметры командной строки.



