CODE REVIEW
Pull request 215

1) Анализ структуры проекта и конкретных классов и функций:
	public class BrainfuckCompiler -
имеет публичный метод compile, который преобразует программу на языке Brainfuck, переданную в класс при его создании в формате строки, в ByteArray - байткод сгенерированного Java-класса, который возвращается как результат функции.
Для генерации байткода используется фреймворк ASM и в частности классы Classwriter, который создает сам класс, и класс MethodVisitor, который использует паттерн Visitor для добавления инструкций. Кроме того, используются объекты-метки для кода (Label) и коды операций для MethodVisitor'a (opcodes). Код программы компилируется за 1 проход, последовательно, каждая операция (за исключением цикла) обрабатывается независимо. Для повышения читаемости и модульности кода используются расширения класса MethodVisitor, 
которые разбирают более сложные операции, такие как цикл или input/output.

	public class BrainfuckInterpreter -
имеет публичный метод run, который делает попытку интерпретировать код программы на языке Brainfuck, переданный в класс при его создании в формате строки(и ничего не возвращает). Корректность программы верифицируется проверкой корректности скобочной структуры, а также во время интерпретирования кода. Об ошибках в ходе работы интерпретатора сигнализируют Exception'ы.
Интерпретатор получает входные данные из inputStream и выводит в outputStream, которые также задаются при создании класса.
Все посторонние знаки в коде игнорируются, массив реализованный на основе Array, расширяется в 2 раза private функцией dataReallocate. Сама интерпретация кода последовательная, итеративно происходит обработка текущего символа, циклы реализуются с помощью поиска соответствующей скобки и изменения InstructionPointer.

	brainfuckCompilerTest, brainfuckInterpreterTest -
отдельные файлы с unit-тестами компилятора/интерпретатора Brainfuck, где реализованы тесты, проверяющие работу основной функциональности соответствующих классов, а также в случае интерпретатора корректной обработки ошибок.


2) Анализ комментариев других ревьюверов и недостатки в коде:

	SlesarevIlya оставил 3 комментария, которые поправляют минорные недостатки в коде, слегка улучшают его читаемость или попросту сокращают кол-во строчек, и в 1 комментарии в brainfuckInterpreter хвалит за вынесение операции поиска соответствующей правой скобки в отдельный метод, что на самом деле сильно улучшает читаемость.
	Тем не менее, я заметил еще несколько минорных недостатков. В компиляторе в методе brainfuckIncPtr() стоило использовать PTR_REF, раз уж он был заведен, вместо магической константы 2. Кроме того, в интерпретаторе в 88 строке идет вызов функции getCorrespondingRightBracketIndex(instructionPointer + 1), что по моему мнению не интуитивно, так как instructionPointer указывает на скобку, и логично что если мы ищем соответствующую, то нужно передать сам instructionPointer без +1. Это ничего не ломает, нужно лишь чуть-чуть переделать сам метод. Еще наверное стоит добавить в компилятор немного комментариев, чтобы пояснить не очень понятные с первого взгяда имена файлов и наборы символов, как на 46-47 или на 67 строке например.
	В целом, мне понравились "говорящие" наименования в коде, стремление к модульности и информативные exception'ы. Тесты, конечно, покрывают довольно мало случаев, но я думаю задача полного покрытия тестами не стояла.


(3) Улучшение кода при помощи новых возможностей Kotlin:

Мест для улучшения при помощи новых возможностей Kotlin в коде не выявлено.