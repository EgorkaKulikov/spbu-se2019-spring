Pull request 215

1. работа программы

Class Brainfuckcompiler

принимает в качестве параметров программу на языке brainfuck, из которой необходимо сгенерировать байт-код jvm.
MAX_MEM - максимальное количество памяти выделенное программе. ARRAY_REF - ссылка на массив, PTR_REF - на ячейку массива.
labelsStack - стек меток, с помощью которого реализованы переходы в циклах (когда цикл начинается в стек кладутся метки,
когда заканчивается происходит переход и метка выталкивается)
все команды языка brainfuck реализованы с помощью расширения класса MethodVisitor
+,- прибавление/убавление 1 к текущей ячейки массива
>,< переход к следующей/предыдущей ячейки массива
[,] начало/конец цикла
., вывод/ввод
функция compile использует ClassWriter (из фреймворка ASM) для генерации байткода класса и возвращает его как результат.

Class BrainfuckInterpreter

функция run последовательно выполняет программу, предварительно проверяя 1) нет ли ненужной закрывающей скобки 2) каждой 
открывающей скобки должна соответствовать какая-то закрывающая
в ходе выполнения программы:
если не хватает памяти (при попытке перейти к следующей ячейки массива) она увеличивается в 2 раза
при попытке перейти к предыдущей ячейки, когда текущая - нулевая кидается ArrayIndexOutOfBoundsException
входные и выходные данные получают/выводят в inputStream/outputStream (получены при создании класса BrainfuckInterpreter)
при начале цикла запоминается следующая инструкция, когда цикл заканчивается 
используется сдвиг instructionPointer (указатель на текущую инструкцию)
цикл заканчивается когда в текущая ячейка массива равна 0.

Class brainfuckCompilerTest

публичная функция testCompiler принимает на вход программу в виде строки, входные данные и предполагаемые выходные.
функция компилирует полученную программу. 
С помощью ByteArrayClassLoader и его метода loadClass загружается java класс полученный из байт-кода.
перенаправляются потоки ввода-вывода и в полученном классе ищется main метод.
Далее сравниваются полученный и предполагаемый разультат (с помощью assertEquals).
4 теста проверяют методы прибавления/убавления, ввода/вывода, циклы и работу в целом на вывод Hello word.
Class brainfuckInterpreterTest - тестирует интерпретатор теми же тестами.

2. Комментарии и недочеты 

Предыдущий ревьюер указал на незначительные недостатки. Я с ним согласен.
Еще некоторые замечания:
21 строка в интерпретаторе private var loopBeginnings = LinkedList<Int>().
Следует понимать, что loopBeginnings это ссылка на LinkedList и она не будет изменяться, хоть и изменяется сам список,
поэтому разумнее бы было использовать val.
в тестах к компилятору в строке 45 в качестве параметра передается строка "test",
но есть переменная name в которой лежит строка "test".
В целом остальное выглядит хорошо, но следовало бы добавить комментарии для непонятных интуитивно строк.