Pull Request #217
https://github.com/practice271/assignments/pull/217
______________________________________________________________________________________
1. Смысловая нагрузка функций

BrainfuckConverter.kt:
        Состоит из объекта Converter, содержащего две функции, которые принимают на вход строку,
        а на выходе выдают код на языке Brainfuck, выводящий данную строку.

        -notOptimalConverte:
                Конвертирует строку не оптимальным способом, увеличивая значение одной и той же ячейки до нужного кода
                символа и затем обнуляя ее (хотя использование цикла [-] можно считать некоторой оптимизацией).

        -optimalConverte:
                В данной функции используются циклы и несколько ячеек, что значительно сокращает получаемый код
                по сравнению с предыдущей функцией.

BrainfuckInterpreter.kt:
        Состоит из класса Interpreter, содержащего единственную функцию interpret:
                Принимает на вход (параметром) код на языке Brainfuck и интерпретирует его, игнорируя "лишние" символы,
                выводя в стандартный поток то, что он (код) печатает. С помощью сканера из стандартного потока ввода
                считываются символы, сохраняемые в ячейке командой "," языка Brainfuck.

BrainfuckCompiler.kt:
        Состоит из объекта Brainfuck, содержащего функции prepare и compile.

        -prepare:
                Удаляет из полученной строки (программы) пробелы.

        -compile:
                Принимает строку -- код программы и outFileName -- внутреннее имя класса ClassWriter (параметр,
                передаваемый методу visit). Функция возвращает массив байт -- байт-код Java.
                С помощью экземпляра класса ClassWriter и генерируется массив байт. При помощи visitMethod
                создается метод main и объект класса MethodVisitor, определяющий инструкции байт-кода. Далее 
                "подготовленный" код разбирается на токены, для которых в цикле генерируются команды в байт-коде.

PetoohCompiler.kt:
        Аналогично компилятору языка Brainfuck.
______________________________________________________________________________________
2. Замечания

Как отметила @minonastya,  в интерпретаторе не обрабатывается ввод неправильных скобочных последовательностей
и используется однобуквенная переменная с неясным именем (l) -- замечания исправлены не были.
В замечаниях про указатель на массив памяти и обработку некорректных символов (все в том же интерпретаторе)
@mikelle аргументировал свою точку зрения.
Также не был исправлен комментарий @anlun о переиспользовании кода компилятора.

Мои замечания:
Interpreter:
        -Для единообразия следовало оставить интерпретатор объектом (или сделать классами конвертер и компилятор).
Converter:
        -В названиях функций используется "converte" (такого слова просто нет), которое следует заменить на "convert"
        а переменную "remaining" на "remainder" (остаток).
Compiler:
        -Обилие магических констант, затрудняющих чтение кода.
        -Следовало бы разбить функцию compile на несколько: вынести обработку каждой из команд Brainfuck'а,
        генерацию метода main. Опять же, для улучшения читаемости кода.
        -object Token можно было бы сделать enum class'ом.
        -можно было бы сделать абстрактный класс Compiler (с "разбитой" функцией compile (второй пункт)) и унаследовать
        от него BrainfuckCompiler и PetoohCompiler, чтобы избежать повторы кода
______________________________________________________________________________________
3. Улучшения кода с помощью новых возможностей языка.

Таких возможностей не обнаружила.