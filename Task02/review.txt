Review of Pull Request #221

1) Обзор пулл реквеста:

Программа состоит из компилятора и интерпретатора языка Brainfuck, а также тестов к ним.

Первый файл - compiler.kt. 
В нем используется фреймворк ASM от ObjectWeb для работы с бинарными классами Java и модификации байт-кода. 
Класс Compiler содержит функцию generateClassByteArray(), возвращающую байт-код, в котором хранится структура сгеренированного класса.
Это реализуется путем создания объекта класса ClassWriter, который и строит представление нашего класса через массив байт. 
С помощью visitMethod определяется метод main и создается объект класса MethodVisitor, который используется для определения аннотаций, атрибутов и, главное, инструкций нашего метода.
Далее выделяется память под 30000 ячеек и последовательно разбираются команды на языке Brainfuck, содержащиеся в str. 

Второй файл - interpreter.kt. 
Он состоит из одной функции parser, которая на вход принимает строку, содержащую, очевидно, программу на Brainfuck.
В цикле while переменная strPointer проходится по всей строке и выполняет соответствующие команды.
С помощью переменной inBrackets проверяется баланс скобок [ и ], и если он не соблюдается, то выводится сообщение о недостаточности открывающих/закрывающих скобок.
В противном же случае возвращается result - строка, содержащая то, что будет напечатано в результате работы программы.

Третий и четвертый файл - Compiler/InterpreterTests.kt.
Здесь реализованы unit-тесты к двум предыдущим файлам, в том числе HelloWorld и проверка на баланс скобок.

2) Замечания ревьюеров:

Комментарии SergeevED были по существу и автор исправил все замечания.
По текущей версии anlun оставил два комментария, в которых обратил внимание на некоторые недочеты - магическая константа и возможность упростить запись лямбда функции.
Тут я согласен, но, по моему мнению, можно подправить кое-что еще:

- переменная mw должна иметь название mv (= MethodVisitor, так же как и cw = ClassWriter).
- возможно стоило создать класс Interpreter, по аналогии с классом Compiler, для поддержания одной структуры. Хотя с другой стороны в интерпретаторе имеется лишь одна функция, требующая на вход только строку с программой, 
поэтому не критично оставить так, как есть.
- названия функций принято записывать глаголами, поэтому все-таки fun parser стоило назвать fun parse или interpret.
- тела, состоящие из одного оператора, я бы не стал заключать в скобки {} (кроме отдельных случаев, когда, например, условие записывается в несколько строк),
  а также else стоит писать на той же строке, что и закрывающая скобка } перед ним.
- строку var beginning : ArrayList<Int> = arrayListOf() можно заменить на var beginning = arrayListOf<Int>().

В целом код более-менее читабелен, переменные названы адекватно и особых замечаний у меня больше нет.

3) Улучшение программы после обновления Kotlin:
Такой возможности не увидел.
