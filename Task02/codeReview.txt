#216. 
(конвертер текста в формате ASCII, интерпретатор языка Brainfuck)
https://github.com/practice271/assignments/pull/216/files



I. Конструкция программы.


1. "converter.kt":
	
Экземпляр класса Converter создаётся с передачей строки (s) и содержит
переменные, отвечающие за длину исходной строки (length) и двумерный массив
размера [length][3] (partNumber), содержащий целочисленные представления 
ASCII-кодов символов в данной строке (инициализирован нулями). Класс 
предлагает возможность представить текст в виде результата работы короткой 
программы на языке Brainfuck.

Для внутренней работы используются четыре приватные функции:
1) parse(m1 : Int, m2 : Int) - заполняет partNumber таким образом, что код 
символа s[i] равен m1 * partNumber[i][0] + m2 * partNumber[i][1] + partNumber[i][2];
2) makeLoop(start : String, j : Int) : String - создаёт и возвращает строку 
Brainfuck кода, состоящую из цикла в количестве start итераций для 
представления partNumber[i][j] частей от кода символа s[i] (подразумевается j, равное 0 или 1).
3) remainder() : String - цель, аналогичная makeLoop(), но без циклов и при фиксированном j = 2.
4) noLoop() : String - переводит все символы исходной строки в программу Brainfuck без циклов.

Они объединяются в публичном методе convert() : String - с помощью noLoop() 
создаётся основа - minProgram - и фиксируется её длина в переменной minLength; 
далее с различными комбинациями i из 2..64, j из 1..i при помощи parse(), 
makeLoop() и remainder() создаются различные варианты той же исходной строки: 
метод возвращает кратчайшую из них.


2. "interpreter.kt"

Представитель класса Interpreter содержит вспомогательные переменные: 
одномерный массив array размера [30000], изначально заполненный нулями, и 
целочисленный индекс i для итерации по нему. Класс предназначен для 
интерпретации кода программы на языке Brainfuck с помощью Kotlin.

Состоит из единственного публичного метода interpret(s : String), который, 
использую две вспомогательные функции findEnd(start : Int) и 
findStart(end : Int) для поиска циклов, посимвольно проходит по исходному коду 
и с помощью оператора ветвления исполняет соответствующие команды Brainfuck (с 
возможным преждевременным окончанием при условии неправильной организации циклов).


3. "MainForm.kt"

Импортируются некоторые библиотеки Java для работы с GUI. Создаётся видимое 
окно с изменяемым размером, значение по умолчанию которого (650, 400): на 
центральной панели находится поле для ввода текста размера (20, 50), на южной 
панели две кнопки ("Interpret" и "Convert"), которые запускают методы из 
соответствующих классов с передачей текста из поля в качестве параметра.



II. Ревью.


1. Отношение к мнению предыдущего ревьювера.

50/50 полезные замечания и субъективные мнения, подробнее:
(все комментарии в "interpreter.kt")

1)
                '>' -> { i++ }
                '<' -> { i-- }
                '+' -> { array[i]++ }
                '-' -> { array[i]-- }
"Неплохо бы проверить на выход за границы"

Действительно, в массиве фиксировано 30000 позиций, что всегда можно превысить.
Но даже если предполагать, что программа не будет настолько большой, всегда 
можно легко выйти за левую границу с помощью '<' - оба случая никак не обрабатываются.

2)
               ',' -> { array[i] = readLine()?.toInt() ?: array[i] }
"Хотелось бы, чтобы в тестах было, т.е. не консольным вводом"

Ни для одной программы, содержащей ',', нельзя написать юнит-тест, это тоже проблема.

3) "Объемная реализация обработки [ и ] с функциями, можно написать проще."

Функции выполняют в точности то, что нужно, и написаны вполне понятно 
(учитывая, что это Brainfuck). Не вижу проблемы в объёме.

4) "Имхо, много { }, используются там, где можно не использовать"

Снова экономия символов на экране. Всё же стоит использовать.


2. Собственные замечания.

1) "MainForm.kt" (30-35): 

 override fun actionPerformed(event : ActionEvent) {
        if (event.source == interpretButton) {
            Interpreter().interpret(textInField.text)
        }
        else { println (Converter(textInField.text).convert()) }
    }

Бросается в глаза неединообразный интерфейс: одни и те же данные одному классу 
передаются в качестве параметра класса, другому - метода, хотя можно сделать 
одинаково (причём любым из двух способов).
Реакцию на событие "если произошло не А, то произошло В" придётся переписывать,
если добавить третью и так далее кнопки.
Также не различаются данные для конвертера и интерпретатора: последний вполне 
может отработать со строкой "+abc123." как с "+.", не обращая внимание на 
нелегальные в Brainfuck символы.

2) "converter.kt":

a) Часто используется "var p = "+"", хотя эту переменную очевидно 
переопределять не стоит. Я бы предпочёл const val. (то же относится и к "var col = 2" в remainder())
b) В циклах можно использовать "A until B" вместо "A..B-1".
c) Есть ощущение, что от remainder() и noLoop() можно избавиться, если добавить
в makeLoop() одну проверку и использовать в convert() диапазон для i 1..64, 
т.к. они всего лишь обрабатывают крайние значения.
d) Нет особенного смысла в хранении массива partNumber для каждого экземпляра, 
т.к. при создании в нём все нули, а после работы convert() результат 
parse(64, 63), а не оптимального по длине разбиения, т.е. почти всегда 
бесполезная информация. Можно занести его внутрь convert(), чтобы сборщик 
мусора мог раньше от него избавиться.
e) При обращении к partNumber используются константы 0, 1 и 2, можно создать
ENUM с осмысленными именами для них.

3) "interpreter.kt":

a) Аналогично 2.d можно перенести переменные i и array внутрь interpret().
b) А вот функции findEnd() и findStart() наоборот вынести из interpret() и 
объявить как private fun. Особых проблем в работе того, как есть, не вижу, но 
хотя бы для лучшей читаемости.
с) В строках 44-65 нет проверки на выход за границы массива и на символы, 
неподдерживаемые Brainfuck, как уже отмечалось ранее.



III. Модернизация кода.

1. "converter.kt" (14-16): используется оператор mod(other: Int): Int. Начиная 
с Kotlin 1.3 его использование запрещено 
(https://kotlinlang.org/docs/reference/compatibility-guide-13.html#mod-operator-convention), 
можно воспользоваться rem(other: Int): Int или "%".

2. "converter.kt" (53-56): сравнение и присвоение наименьшего - в точности 
функция min(a: Int, b: Int): Int, появившаяся в версии 1.2.